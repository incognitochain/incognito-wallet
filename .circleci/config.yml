commands:
  get_app_info:
    description: "Get app version and last commit message"
    steps:
      - run:
          name: Setup Environment Variables
          command: |
            echo "export LAST_COMMIT_MESSAGE=\"$(git show -s --format=%s)\"" >> $BASH_ENV
            echo "export APP_VERSION="$(sed 's/.*\"version\": \"\(.*\)\".*/\1/;t;d' ./package.json)"" >> $BASH_ENV
  login_appcenter:
      description: "Install and login appcenter"
      steps:
        - run:
            name: Login appcenter
            command: |
              npm install appcenter-cli@2.6.3 -g
              appcenter login --token $CODEPUSH_ACCESS_TOKEN --disable-telemetry
jobs:
  checkout_code:
    executor:
      name: rn/linux_js
      node_version: '10'
    steps:
      - checkout
      - persist_to_workspace:
          paths: .
          root: .
  generate_data:
    executor:
      name: rn/linux_js
      node_version: '10'
    steps:
      - attach_workspace:
          at: .
      - run: chmod +x .circleci/generate-data.sh
      - run: sh .circleci/generate-data.sh
      - restore_cache:
          name: Restore Yarn Package Cache
          keys:
            - yarn-packages-{{ checksum "yarn.lock" }}
      - run:
          name: Install Dependencies
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Save Yarn Package Cache
          key: yarn-packages-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn
      - persist_to_workspace:
          paths: .
          root: .
  build_android_staging:
    executor:
      name: rn/linux_android
    steps:
      - attach_workspace:
          at: .
      - get_app_info
      - run: yarn buildStaging
      - run: chmod +x .circleci/slack-upload.sh
      - run: cp android/app/build/outputs/apk/releaseStaging/app-releaseStaging.apk ./$APP_VERSION-staging.apk
      - run: bash .circleci/slack-upload.sh -f ./$APP_VERSION-staging.apk -c '$SLACK_CHANNEL' -s $SLACK_API_KEY -n "$APP_VERSION-staging" -x "$LAST_COMMIT_MESSAGE"
  build_android_next:
    executor:
      name: rn/linux_android
    steps:
      - attach_workspace:
          at: .
      - get_app_info
      - run: yarn buildNext
      - run: chmod +x .circleci/slack-upload.sh
      - run: cp android/app/build/outputs/apk/releaseNext/app-releaseNext.apk ./$APP_VERSION-next.apk
      - run: bash .circleci/slack-upload.sh -f ./$APP_VERSION-next.apk -c '$SLACK_CHANNEL' -s $SLACK_API_KEY -n "$APP_VERSION-next" -x "\"$LAST_COMMIT_MESSAGE\""
  build_android_release:
    executor:
      name: rn/linux_android
    steps:
      - attach_workspace:
          at: .
      - get_app_info
      - run: yarn buildRelease
      - run: chmod +x .circleci/slack-upload.sh
      - run: cp android/app/build/outputs/apk/release/app-release.apk ./$APP_VERSION.apk
      - run: bash .circleci/slack-upload.sh -f ./$APP_VERSION.apk -c '$SLACK_CHANNEL' -s $SLACK_API_KEY -n "$APP_VERSION" -x "\"$LAST_COMMIT_MESSAGE\""
  push_android_staging:
    executor:
      name: rn/linux_android
    steps:
      - attach_workspace:
          at: .
      - login_appcenter
      - get_app_info
      - run: yarn deployAndroid:staging
      - run: curl -X POST -H "Content-type:application/json" --data '{"text":"'"Deploy Android $APP_VERSION staging successfully! $LAST_COMMIT_MESSAGE"'"}' $SLACK_HOOK
  push_ios_staging:
    executor:
      name: rn/linux_android
    steps:
      - attach_workspace:
          at: .
      - login_appcenter
      - get_app_info
      - run: yarn deployIOS:staging
      - run: curl -X POST -H 'Content-type:application/json' --data '{"text":"'"Deploy iOS $APP_VERSION staging successfully! $LAST_COMMIT_MESSAGE"'"}' $SLACK_HOOK
  push_android_next:
    executor:
      name: rn/linux_android
    steps:
      - attach_workspace:
          at: .
      - login_appcenter
      - get_app_info
      - run: yarn deployAndroid:next
      - run: curl -X POST -H "Content-type:application/json" --data '{"text":"'"Deploy Android $APP_VERSION next release successfully! $LAST_COMMIT_MESSAGE"'"}' $SLACK_HOOK
  push_ios_next:
    executor:
      name: rn/linux_android
    steps:
      - attach_workspace:
          at: .
      - login_appcenter
      - get_app_info
      - run: yarn deployIOS:next
      - run: curl -X POST -H 'Content-type:application/json' --data '{"text":"'"Deploy iOS $APP_VERSION next release successfully! $LAST_COMMIT_MESSAGE"'"}' $SLACK_HOOK
  push_android_production:
    executor:
      name: rn/linux_android
    steps:
      - attach_workspace:
          at: .
      - login_appcenter
      - get_app_info
      - run: yarn deployAndroid:prod
      - run: curl -X POST -H "Content-type:application/json" --data '{"text":"'"Deploy Android $APP_VERSION production successfully! $LAST_COMMIT_MESSAGE"'"}' $SLACK_HOOK
  push_ios_production:
    executor:
      name: rn/linux_android
    steps:
      - attach_workspace:
          at: .
      - login_appcenter
      - get_app_info
      - run: yarn deployIOS:prod
      - run: curl -X POST -H 'Content-type:application/json' --data '{"text":"'"Deploy iOS $APP_VERSION production successfully! $LAST_COMMIT_MESSAGE"'"}' $SLACK_HOOK
  push_play_store:
    executor:
      name: rn/linux_android
    steps:
      - attach_workspace:
          at: .
      - get_app_info
      - run: bundle install
      - run: bundle exec fastlane android release
      - run: chmod +x .circleci/slack-upload.sh
      - run: cp android/app/build/outputs/apk/release/app-release.apk ./$APP_VERSION.apk
      - run: bash .circleci/slack-upload.sh -f ./$APP_VERSION.apk -c '$SLACK_CHANNEL' -s $SLACK_API_KEY -n "$APP_VERSION" -x "\"$LAST_COMMIT_MESSAGE\""
  push_app_store:
    macos:
      xcode: 11.3.0
    steps:
      - attach_workspace:
          at: .
      - get_app_info
      - run: bundle install
      - run: |
          cd ios
          pod install
      - run: brew update
      - run: brew install watchman
      - run: bundle exec fastlane ios release
      - run: chmod +x .circleci/slack-upload.sh
      - run: curl -X POST -H 'Content-type:application/json' --data '{"text":"'"Push iOS $APP_VERSION to the app store successfully!"'"}' $SLACK_HOOK
  publish_github_release:
    docker:
      - image: cibuilds/github:0.13
    steps:
      - attach_workspace:
          at: .
      - run:
          name: "Publish Release on GitHub"
          command: |
            ghr -t ${GITHUB_TOKEN} -u incognitochain -r incognito-wallet -c ${CIRCLE_SHA1} -soft ${APP_VERSION} .
orbs:
  rn: react-native-community/react-native@4.1.0
version: 2.1
workflows:
  build_staging:
    jobs:
      - checkout_code:
          filters:
            branches:
              only:
                - build/staging
      - generate_data:
          requires:
            - checkout_code
      - build_android_staging:
          requires:
            - generate_data
  build_release:
      jobs:
        - checkout_code:
            filters:
              branches:
                only:
                  - build/release
        - generate_data:
            requires:
              - checkout_code
        - build_android_release:
            requires:
              - generate_data
  build_next:
      jobs:
        - checkout_code:
            filters:
              branches:
                only:
                  - build/next
        - generate_data:
            requires:
              - checkout_code
        - build_android_next:
            requires:
              - generate_data
  push_staging:
      jobs:
        - checkout_code:
            filters:
              branches:
                only:
                  - develop
        - generate_data:
            requires:
              - checkout_code
        - push_android_staging:
            requires:
              - generate_data
        - push_ios_staging:
            requires:
              - generate_data
  push_next:
      jobs:
        - checkout_code:
            filters:
              branches:
                only:
                  - next-release
        - generate_data:
            requires:
              - checkout_code
        - push_android_next:
            requires:
              - generate_data
        - push_ios_next:
            requires:
              - generate_data
  store:
    jobs:
      - checkout_code:
          filters:
            branches:
              only:
                - store
      - generate_data:
          requires:
            - checkout_code
      - push_app_store:
          requires:
            - generate_data
      - push_play_store:
          requires:
            - generate_data
      - publish_github_release:
          requires:
            - generate_data
  push_production:
    jobs:
      - checkout_code:
          filters:
            branches:
              only:
                - master
      - generate_data:
          requires:
            - checkout_code
      - push_android_production:
          requires:
            - generate_data
      - push_ios_production:
          requires:
            - generate_data
